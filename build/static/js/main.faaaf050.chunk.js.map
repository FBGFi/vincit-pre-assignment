{"version":3,"sources":["components/Form/index.tsx","pages/Page.tsx","components/Form/FormInput/index.tsx","components/Form/DateInput/index.tsx","constants/interfaces/ApiCalls/index.ts","constants/classes/CoinGeckoApiCalls/index.ts","constants/routes.ts","constants/functions/conversions.ts","components/Modal/index.tsx","components/DataChart/index.tsx","components/LoadingIndicator/index.tsx","pages/Home/index.tsx","App.tsx","index.tsx"],"names":["Form","React","forwardRef","props","ref","className","onSubmit","e","preventDefault","children","type","Page","FormInput","htmlFor","id","title","DateInput","required","name","min","max","onChange","ApiCalls","url","apiUrl","this","queryParams","query","param","push","join","route","callback","fetch","parseQueryParameters","then","response","json","catch","err","console","error","CoinGeckoApiCalls","routes","dateToTimeStamp","date","Date","getTime","timeStampToDate","getUTCDate","getUTCMonth","getUTCFullYear","addZeroesToStartOfNumber","value","length","returnValue","toString","i","Modal","onClick","close","DataChart","canvasRef","useRef","getMinMaxOf2DIndex","arr","idx","Math","apply","map","drawChartToCanvas","canvas","color","data","from","to","firstX","xDivider","width","firstY","yDivider","height","ctx","getContext","strokeStyle","lineWidth","padding","beginPath","moveTo","lineTo","stroke","useEffect","current","scale","setCanvasResolution","total_volumes","prices","finishedDrawing","toFixed","LoadingIndicator","xmlns","fill","viewBox","cx","cy","r","strokeWidth","strokeDasharray","Home","useState","loading","isLoading","modalHidden","hideModal","dataChart","setDataChart","highestVolume","setHighestVolume","downWardDays","setDownWardDays","bestProfitDates","setBestProfitDates","now","startDateMax","setStartDateMax","undefined","endDateMin","setEndDateMin","bitCoinRangeFormRef","createRef","apiCalls","formatResponseArray","formatted","obj","getDownWardTrendDays","total_prices","highestDownWardDays","currentDownWardDays","downWardEnd","previousDate","dates","Object","keys","downWardStart","findIndex","start","end","handleResponse","window","alert","volumes","highestDate","volume","getHighestVolume","downWardTrendDays","bestBuyDate","bestSellDate","buy","price","sell","getBestProfitDates","changeEndDateMin","target","fromEntries","FormData","start_date","end_date","queryParameters","vs_currency","getMarketChartRange","formRef","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0YAwBeA,EAhBFC,IAAMC,YAAgE,SAACC,EAAOC,GAKvF,OACI,uBACIA,IAAKA,EACLC,UAAWF,EAAME,WAAa,OAC9BC,SARS,SAACC,GACdA,EAAEC,iBACFL,EAAMG,SAASC,IAGf,UAIKJ,EAAMM,SACP,wBAAQC,KAAK,SAAb,0BCJGC,G,MARmB,SAACR,GAC/B,OACI,sBAAME,UAAWF,EAAME,WAAa,OAApC,SACKF,EAAMM,aCOJG,G,MAT6B,SAACT,GACzC,OACI,qCACI,uBAAOU,QAASV,EAAMW,GAAtB,SAA2BX,EAAMY,QAChCZ,EAAMM,cCEJO,EARyB,SAACb,GACrC,OACI,cAAC,EAAD,CAAWY,MAAOZ,EAAMY,MAAOD,GAAIX,EAAMW,GAAzC,SACI,uBAAOG,SAAUd,EAAMc,SAAUP,KAAK,OAAOQ,KAAMf,EAAMe,KAAMJ,GAAIX,EAAMW,GAAIK,IAAKhB,EAAMgB,IAAKC,IAAKjB,EAAMiB,IAAKC,SAAUlB,EAAMkB,c,6BCTnHC,EAAtB,WAGI,WAAYC,GAAc,yBAFhBC,YAEe,EACrBC,KAAKD,OAASD,EAJtB,wDAOI,SAA6BG,GACzB,IAAIA,EAAa,OAAO,KACxB,IAAIC,EAAkB,GACtB,IAAI,IAAIC,KAASF,EACbC,EAAME,KAAN,UAAcD,EAAd,YAAuBF,EAAYE,KAEvC,MAAM,IAAN,OAAWD,EAAMG,KAAK,QAb9B,sIAgBI,SAAgBC,EAAeC,EAAmCN,GAC9DO,MAAM,GAAD,OAAIR,KAAKD,QAAT,OAAkBO,GAAlB,OAA0BN,KAAKS,qBAAqBR,KACpDS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIJ,EAASI,MAC1BE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,YApBxC,KCGaG,EAAb,uKAMI,SAAyBV,GACrBP,KAAKQ,MAAM,cAAeD,KAPlC,iCASI,SACIlB,EACAkB,EACAN,GACAD,KAAKQ,MAAL,iBAAqBnB,EAArB,uBAA8CkB,EAAUN,OAbhE,GAAuCJ,GCH1BqB,EACE,mCCDTC,EAAkB,SAACC,GACrB,OAAO,IAAIC,KAAKD,GAAME,UAAY,KAGhCC,EAAkB,SAACH,GAAD,gBAA2BA,EAAKI,aAAhC,YAAgDJ,EAAKK,cAAgB,EAArE,YAA0EL,EAAKM,mBAEjGC,EAA2B,SAACC,EAAeC,GAE7C,IADA,IAAIC,EAAcF,EAAMG,WAChBC,EAAIF,EAAYD,OAAQG,EAAIH,EAAQG,IACxCF,EAAc,IAAMA,EAExB,OAAOA,GCOIG,G,MAXqB,SAACvD,GACjC,OACI,qBAAKE,UAAU,QAAf,SACI,sBAAKA,UAAU,YAAf,UACKF,EAAMM,SACP,wBAAQkD,QAAS,kBAAMxD,EAAMyD,OAAM,IAAnC,0BCoFDC,G,MAtF6B,SAAC1D,GACzC,IAAM2D,EAAYC,iBAAiC,MAGnD,SAASC,EAAmBC,EAAsBC,GAC9C,MAAO,CACH/C,IAAKgD,KAAKhD,IAAIiD,MAAM,KAAMH,EAAII,KAAI,SAAU9D,GAAK,OAAOA,EAAE2D,OAC1D9C,IAAK+C,KAAK/C,IAAIgD,MAAM,KAAMH,EAAII,KAAI,SAAU9D,GAAK,OAAOA,EAAE2D,QAKlE,IAAMI,EAAoB,SACtBC,EACAC,EACAC,GACA,IAOIC,EACAC,EARAC,EAASH,EAAK,GAAG,GAGjBI,GAFQJ,EAAKA,EAAKnB,OAAS,GAAG,GAEVsB,GAAWL,EAAOO,MAC1C,EAAkCd,EAAmBS,EAAM,GAAhDM,EAAX,EAAM5D,IACF6D,GADJ,EAAmB5D,IACK2D,IAAWR,EAAOU,OAH5B,IAIRC,EAAMX,EAAOY,WAAW,MAG9B,GAAID,EAAK,CACLA,EAAIE,YAAcZ,EAClBU,EAAIG,UAAY,GAChB,IAAK,IAAI5B,EAAI,EAAGA,EAAIgB,EAAKnB,OAAQG,IAC7BiB,EAAO,EACDD,EAAKhB,EAAI,GAAG,GAAKmB,GAAUC,EA5BzB,GA6BHN,EAAOU,SAAWR,EAAKhB,EAAI,GAAG,GAAKsB,GAAUC,EAAWM,KA7BrD,GA+BRX,EAAK,EACCF,EAAKhB,GAAG,GAAKmB,GAAUC,EAhCrB,GAiCHN,EAAOU,SAAWR,EAAKhB,GAAG,GAAKsB,GAAUC,EAAWM,KAjCjD,GAmCRJ,EAAIK,YACJL,EAAIM,OAAOd,EAAK,GAAIA,EAAK,IACzBQ,EAAIO,OAAOd,EAAG,GAAIA,EAAG,IACrBO,EAAIQ,WAuBhB,OATAC,qBAAU,WACF7B,EAAU8B,WAVU,SAACrB,GACzB,IAAMW,EAAMX,EAAOY,WAAW,MAC1BD,IACAX,EAAOO,MA9CK,EA8CGP,EAAOO,MACtBP,EAAOU,OA/CK,EA+CIV,EAAOU,OACvBC,EAAIW,MAhDQ,MAsDZC,CAAoBhC,EAAU8B,SAC9BtB,EAAkBR,EAAU8B,QAAS,qBAAsBzF,EAAMsE,KAAKsB,eACtEzB,EAAkBR,EAAU8B,QAAS,MAAOzF,EAAMsE,KAAKuB,SAE3D7F,EAAM8F,oBACP,IAGC,sBAAK5F,UAAU,YAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,uBAAMA,UAAU,qBAAhB,WAAuC2D,EAAmB7D,EAAMsE,KAAKsB,cAAe,GAAG3E,IAAM,KAAY8E,QAAQ,GAAjH,cACA,uBAAM7F,UAAU,oBAAhB,WAAsC2D,EAAmB7D,EAAMsE,KAAKsB,cAAe,GAAG5E,IAAM,KAAY+E,QAAQ,GAAhH,iBAEJ,sBAAK7F,UAAU,kBAAf,UACI,sBAAMA,UAAU,sBAAhB,SAAuC2C,EAAgB,IAAIF,KAAK3C,EAAMsE,KAAKsB,cAAc,GAAG,OAC5F,sBAAM1F,UAAU,gBAAhB,6BACA,sBAAMA,UAAU,qBAAhB,SAAsC2C,EAAgB,IAAIF,KAAK3C,EAAMsE,KAAKsB,cAAc5F,EAAMsE,KAAKsB,cAAczC,OAAS,GAAG,OAC7H,wBAAQlD,IAAK0D,IACb,sBAAMzD,UAAU,qBAAhB,SAAsC2C,EAAgB,IAAIF,KAAK3C,EAAMsE,KAAKuB,OAAO,GAAG,OACpF,sBAAM3F,UAAU,eAAhB,mBACA,sBAAMA,UAAU,oBAAhB,SAAqC2C,EAAgB,IAAIF,KAAK3C,EAAMsE,KAAKuB,OAAO7F,EAAMsE,KAAKsB,cAAczC,OAAS,GAAG,UAEzH,sBAAKjD,UAAU,cAAf,UACI,uBAAMA,UAAU,oBAAhB,WAAsC2D,EAAmB7D,EAAMsE,KAAKuB,OAAQ,GAAG5E,IAAM,KAAM8E,QAAQ,GAAnG,cACA,uBAAM7F,UAAU,mBAAhB,WAAqC2D,EAAmB7D,EAAMsE,KAAKuB,OAAQ,GAAG7E,IAAM,KAAM+E,QAAQ,GAAlG,sBCpEDC,G,MAnBoB,WAC/B,OACI,qBAAKC,MAAM,6BACP/F,UAAU,mBACVyE,MAAM,KACNG,OAAO,KACPoB,KAAK,OACLC,QAAO,YALX,SAMI,wBACIC,GAAG,KACHC,GAAG,KACHC,EAAE,KACFf,OAAO,qBACPgB,YAAY,IACZC,gBAAgB,cC+LjBC,EAjLQ,WACnB,IJlBgC/D,EIkBhC,EAA6BgE,oBAAS,GAAtC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAiCF,oBAAS,GAA1C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,mBAA6B,MAA/D,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0CN,mBAAgC,MAA1E,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAwCR,mBAA+B,MAAvE,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAA8CV,mBAAkC,MAAhF,mBAAOW,EAAP,KAAwBC,EAAxB,KACA,EAAwCZ,oBJxBRhE,EIwBoD,IAAIC,KAAKA,KAAK4E,OJvB3FtE,EAAyBP,EAAKM,iBAAkB,GACrD,IACFC,EAAyBP,EAAKK,cAAgB,EAAG,GAC/C,IACFE,EAAyBP,EAAKI,aAAc,KImB5C,mBAAO0E,EAAP,KAAqBC,EAArB,KACA,EAAoCf,wBAA6BgB,GAAjE,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAsBC,sBACtBC,EAAW,IAAIxF,EAAkBC,GAEjCwF,EAAsB,SAAClE,GACzB,IAD6E,EACvEmE,EAAuC,GADgC,cAG7DnE,GAH6D,IAG7E,2BAAqB,CAAC,IAAboE,EAAY,QAGjBD,EAFOpF,EAAgB,IAAIF,KAAKuF,EAAI,MAElBA,EAAI,IANmD,8BAc7E,OAAOD,GAkBLE,EAAuB,SAACC,GAC1B,IAAMvC,EAASmC,EAAoBI,GAE/BC,EAAsB,EACtBC,EAAsB,EACtBC,EAAc,GACdC,EAAe,GACnB,IAAK,IAAI9F,KAAQmD,EACTA,EAAO2C,IAAiB3C,EAAO2C,GAAgB3C,EAAOnD,IACtD4F,IAEAD,EAAsBC,IACtBD,EAAsBC,EACtBC,EAAc7F,GAEdmD,EAAO2C,GAAgB3C,EAAOnD,KAC9B4F,EAAsB,GAE1BE,EAAe9F,EAEnB,IAAI+F,EAAQC,OAAOC,KAAK9C,GACpB+C,EAAgBH,EAAMA,EAAMI,WAAU,SAAAnG,GAAI,OAAIA,IAAS6F,KAAeF,EAAsB,GAChG,OAA4B,IAAxBA,EAAkC,KAE/B,CACHS,MAAOF,EACPG,IAAKR,EACLpF,OAAQkF,IAoCVW,EAAiB,SAAC/G,GACpB,GAA8B,IAA3BA,EAAS4D,OAAO1C,OAGf,OAFA8F,OAAOC,MAAM,yCACbtC,GAAU,GAIdM,EArFqB,SAACtB,GACtB,IAAMuD,EAAUnB,EAAoBpC,GAChCqB,EAAgB,EAChBmC,EAAc,GAElB,IAAK,IAAI1G,KAAQyG,EACTlC,EAAgBkC,EAAQzG,KACxBuE,EAAgBkC,EAAQzG,GACxB0G,EAAc1G,GAGtB,MAAoB,KAAhB0G,EAA2B,KACxB,CAAE1G,KAAM0G,EAAaC,OAAQpC,GAyEnBqC,CAAiBrH,EAAS2D,gBAC3CwB,EAAgBe,EAAqBlG,EAAS4D,SAC9CyB,EAxCuB,SAACc,GACxB,IAAImB,EAAoBpB,EAAqBC,GACvCvC,EAASmC,EAAoBI,GAEnC,IAAKmB,GAAqBA,EAAkBpG,SAAWuF,OAAOC,KAAK9C,GAAQ1C,OAAQ,OAAO,KAE1F,IAAIqG,EAAc,GACdC,EAAe,GAEnB,IAAK,IAAI/G,KAAQmD,IACRA,EAAO2D,IAAgB3D,EAAO2D,GAAe3D,EAAOnD,MACrD8G,EAAc9G,KAEbmD,EAAO4D,IAAiB5D,EAAO4D,GAAgB5D,EAAOnD,MACvD+G,EAAe/G,GAIvB,MAAO,CACHgH,IAAK,CACDhH,KAAM8G,EACNG,MAAO9D,EAAO2D,IAElBI,KAAM,CACFlH,KAAM+G,EACNE,MAAO9D,EAAO4D,KAeHI,CAAmB5H,EAAS4D,SAC/CmB,EAAa,cAAC,EAAD,CAAWlB,gBAAiB,WACrCc,GAAU,IACXtC,KAAMrC,KACT6E,GAAU,IAcRgD,EAAmB,SAAC1J,GACtBwH,EAAcxH,EAAE2J,OAAO7G,OACvBuE,EAAgBrH,EAAE2J,OAAO7G,QAG7B,OACI,eAAC,EAAD,CAAMhD,UAAWyG,EAAU,qBAAuB,OAAlD,UACME,EAMS,KANK,eAAC,EAAD,CAAOpD,MAAOqD,EAAd,UACZ,uDACA,+BAAOK,EAAY,4CAAiCA,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAchE,OAA/C,yBAA+DgE,QAA/D,IAA+DA,OAA/D,EAA+DA,EAAc2B,MAA7E,sBAAyF3B,QAAzF,IAAyFA,OAAzF,EAAyFA,EAAc4B,KAAQ,sBAClI,wCAAO9B,QAAP,IAAOA,OAAP,EAAOA,EAAevE,KAAtB,oDAAsEuE,QAAtE,IAAsEA,OAAtE,EAAsEA,EAAeoC,OAAOtD,QAAQ,GAApG,YACA,+BAAOsB,EAAe,8CAAmCA,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAiBqC,IAAIhH,KAAxD,uBAAoE2E,QAApE,IAAoEA,OAApE,EAAoEA,EAAiBqC,IAAIC,MAAM5D,QAAQ,GAAvG,uDAA4IsB,QAA5I,IAA4IA,OAA5I,EAA4IA,EAAiBuC,KAAKlH,KAAlK,uBAA8K2E,QAA9K,IAA8KA,OAA9K,EAA8KA,EAAiBuC,KAAKD,MAAM5D,QAAQ,GAAlN,UAAyN,mCAC9OgB,KAEJJ,EAAU,cAAC,EAAD,IAAuB,KAClC,eAAC,EAAD,CACIzG,UAAU,mBACVC,SA5BmB,SAACC,GAC5BwG,GAAU,GACV,MAAiC8B,OAAOsB,YAAY,IAAIC,SAAS7J,EAAE2J,SAA3DG,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SACdC,EAAkB,CACpBC,YAAa,MACb9F,KAAM9B,EAAgByH,GACtB1F,GAAI/B,EAAgB0H,GAAY,OAEpCpC,EAASuC,oBAAoB,UAAWtB,EAAgBoB,IAqBhDnK,IAAK4H,EAHT,UAKI,cAAC,EAAD,CACI0C,QAAS1C,EACT/G,UAAU,EACVH,GAAG,aACHI,KAAK,aACLH,MAAM,aACNK,IAAKuG,EACLtG,SAAU4I,IAEd,cAAC,EAAD,CACIS,QAAS1C,EACT/G,UAAU,EACVH,GAAG,WACHI,KAAK,WACLH,MAAM,WACNI,IAAK2G,EACLzG,SAAU4I,WC5LfU,EATH,WACV,OACE,sBAAKtK,UAAU,MAAf,UACE,cAAC,EAAD,IACA,4D,MCJNuK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.faaaf050.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.scss';\r\n\r\ntype FormProps = {\r\n    className?: string;\r\n    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nconst Form = React.forwardRef<HTMLFormElement, React.PropsWithChildren<FormProps>>((props, ref) => {\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        props.onSubmit(e);\r\n    }\r\n    return (\r\n        <form\r\n            ref={ref}\r\n            className={props.className || 'Form'}\r\n            onSubmit={onSubmit}>\r\n            {props.children}\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n});\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Page.scss';\r\n\r\ntype PageProps = {\r\n    className?: string;\r\n}\r\n\r\nconst Page: React.FC<PageProps> = (props) => {\r\n    return(\r\n        <main className={props.className || 'Page'}>\r\n            {props.children}\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Page;","import React from 'react';\r\n\r\ntype FormInputProps = {\r\n    children: JSX.Element;\r\n    title: string;\r\n    id: string;\r\n}\r\n\r\nconst FormInput: React.FC<FormInputProps> = (props) => {\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id}>{props.title}</label>\r\n            {props.children}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FormInput;","import React from 'react';\r\nimport './DateInput.scss';\r\n\r\nimport FormInput from 'components/Form/FormInput';\r\nimport { TFormField } from '../types';\r\n\r\nconst DateInput: React.FC<TFormField> = (props) => {\r\n    return (\r\n        <FormInput title={props.title} id={props.id}>\r\n            <input required={props.required} type=\"date\" name={props.name} id={props.id} min={props.min} max={props.max} onChange={props.onChange}/>\r\n        </FormInput>\r\n    );\r\n}\r\n\r\nexport default DateInput;","export abstract class ApiCalls {\r\n    protected apiUrl: string;\r\n\r\n    constructor(url: string) {\r\n        this.apiUrl = url;\r\n    }\r\n\r\n    private parseQueryParameters(queryParams: {[key: string]: string|number} | undefined): string | null{\r\n        if(!queryParams) return null;\r\n        let query: string[] = [];\r\n        for(let param in queryParams){\r\n            query.push(`${param}=${queryParams[param]}`);\r\n        }\r\n        return `?${query.join('&')}`;\r\n    }\r\n\r\n    protected fetch(route: string, callback: (response: any) => void, queryParams?: {[key: string]: string|number}): void{\r\n        fetch(`${this.apiUrl}${route}${this.parseQueryParameters(queryParams)}`)\r\n            .then(response => response.json())\r\n            .then(response => callback(response))\r\n            .catch(err => console.error(err))\r\n    }\r\n}","import { ApiCalls } from \"constants/interfaces/ApiCalls\";\r\nimport { TCoinGeckoResponse, TMarketChartRangeQueryParams } from \"./types\";\r\n\r\nexport class CoinGeckoApiCalls extends ApiCalls {\r\n    /**\r\n     * @author Aleksi\r\n     * @description Returns list of all supported coins, however the list contains around 11k results, so no real use for this\r\n     * @param callback - callback function to handle the response\r\n     */\r\n    public getSupportedCoins(callback: (response: Object) => void): void {\r\n        this.fetch(\"/coins/list\", callback);\r\n    }\r\n    public getMarketChartRange(\r\n        id: string,\r\n        callback: (response: TCoinGeckoResponse) => void,\r\n        queryParams: TMarketChartRangeQueryParams): void {\r\n        this.fetch(`/coins/${id}/market_chart/range`, callback, queryParams);\r\n    }\r\n}","export const routes = {\r\n    coinGecko: \"https://api.coingecko.com/api/v3\"\r\n}","const dateToTimeStamp = (date: string): number => {\r\n    return new Date(date).getTime() / 1000;\r\n}\r\n\r\nconst timeStampToDate = (date: Date): string => `${date.getUTCDate()}.${date.getUTCMonth() + 1}.${date.getUTCFullYear()}`;\r\n\r\nconst addZeroesToStartOfNumber = (value: number, length: number): string => {\r\n    let returnValue = value.toString();\r\n    for(let i = returnValue.length; i < length; i++) {\r\n        returnValue = \"0\" + returnValue;\r\n    }\r\n    return returnValue;\r\n}\r\n\r\nconst timeStampToDateInputFormat = (date: Date): string => {\r\n    return addZeroesToStartOfNumber(date.getUTCFullYear(), 2)\r\n    + '-' +\r\n    addZeroesToStartOfNumber(date.getUTCMonth() + 1, 2)\r\n    + '-' +\r\n    addZeroesToStartOfNumber(date.getUTCDate(), 2)\r\n};\r\n\r\nexport { dateToTimeStamp, timeStampToDate, timeStampToDateInputFormat }","import React from 'react';\r\nimport './Modal.scss';\r\n\r\ntype ModalProps = {\r\n    close: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = (props) => {\r\n    return (\r\n        <div className='Modal'>\r\n            <div className=\"container\">\r\n                {props.children}\r\n                <button onClick={() => props.close(true)}>Close</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;","import { TCoinGeckoResponse } from 'constants/classes/CoinGeckoApiCalls/types';\r\nimport { timeStampToDate } from 'constants/functions/conversions';\r\nimport React, { useRef, useEffect } from 'react';\r\nimport './DataChart.scss';\r\n\r\ntype DataChartProps = {\r\n    data: TCoinGeckoResponse;\r\n    finishedDrawing: () => void;\r\n}\r\n\r\nconst DataChart: React.FC<DataChartProps> = (props) => {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    const canvasScale = 5;\r\n\r\n    function getMinMaxOf2DIndex(arr: Array<number[]>, idx: number) {\r\n        return {\r\n            min: Math.min.apply(null, arr.map(function (e) { return e[idx] })),\r\n            max: Math.max.apply(null, arr.map(function (e) { return e[idx] }))\r\n        }\r\n    }\r\n\r\n    // Note that the chart draws each datapoint, not just ones closest to midnight\r\n    const drawChartToCanvas = (\r\n        canvas: HTMLCanvasElement,\r\n        color: string,\r\n        data: Array<number[]>) => {\r\n        let firstX = data[0][0];\r\n        let lastX = data[data.length - 1][0];\r\n        let padding = 50;\r\n        let xDivider = (lastX - firstX) / (canvas.width);\r\n        let { min: firstY, max: lastY } = getMinMaxOf2DIndex(data, 1);\r\n        let yDivider = (lastY - firstY) / (canvas.height - padding);\r\n        const ctx = canvas.getContext(\"2d\");\r\n        let from: number[];\r\n        let to: number[];\r\n        if (ctx) {\r\n            ctx.strokeStyle = color;\r\n            ctx.lineWidth = 2 / canvasScale;\r\n            for (let i = 1; i < data.length; i++) {\r\n                from = [\r\n                    ((data[i - 1][0] - firstX) / xDivider) / canvasScale,\r\n                    (canvas.height - ((data[i - 1][1] - firstY) / yDivider + padding / 2)) / canvasScale\r\n                ];\r\n                to = [\r\n                    ((data[i][0] - firstX) / xDivider) / canvasScale,\r\n                    (canvas.height - ((data[i][1] - firstY) / yDivider + padding / 2)) / canvasScale\r\n                ];                \r\n                ctx.beginPath();                \r\n                ctx.moveTo(from[0], from[1]);\r\n                ctx.lineTo(to[0], to[1]);\r\n                ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    const setCanvasResolution = (canvas: HTMLCanvasElement) => {\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (ctx) {\r\n            canvas.width = canvas.width * canvasScale;\r\n            canvas.height = canvas.height * canvasScale;\r\n            ctx.scale(canvasScale, canvasScale);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current) {\r\n            setCanvasResolution(canvasRef.current);\r\n            drawChartToCanvas(canvasRef.current, \"hsl(30, 100%, 47%)\", props.data.total_volumes);\r\n            drawChartToCanvas(canvasRef.current, \"red\", props.data.prices);\r\n        }\r\n        props.finishedDrawing();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"DataChart\">\r\n            <div className=\"volumes-range\">\r\n                <span className=\"volumes-label high\">{(getMinMaxOf2DIndex(props.data.total_volumes, 1).max / 1000000000).toFixed(2)}B €</span>\r\n                <span className=\"volumes-label low\">{(getMinMaxOf2DIndex(props.data.total_volumes, 1).min / 1000000000).toFixed(2)}B €</span>\r\n            </div>\r\n            <div className=\"chart-container\">\r\n                <span className=\"volumes-label first\">{timeStampToDate(new Date(props.data.total_volumes[0][0]))}</span>\r\n                <span className=\"volumes-label\">Trading Volumes</span>\r\n                <span className=\"volumes-label last\">{timeStampToDate(new Date(props.data.total_volumes[props.data.total_volumes.length - 1][0]))}</span>\r\n                <canvas ref={canvasRef} />\r\n                <span className=\"prices-label first\">{timeStampToDate(new Date(props.data.prices[0][0]))}</span>\r\n                <span className=\"prices-label\">Price</span>\r\n                <span className=\"prices-label last\">{timeStampToDate(new Date(props.data.prices[props.data.total_volumes.length - 1][0]))}</span>\r\n            </div>\r\n            <div className=\"price-range\">\r\n                <span className=\"prices-label high\">{(getMinMaxOf2DIndex(props.data.prices, 1).max / 1000).toFixed(2)}K €</span>\r\n                <span className=\"prices-label low\">{(getMinMaxOf2DIndex(props.data.prices, 1).min / 1000).toFixed(2)}K €</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataChart;","import React from 'react';\r\nimport './LoadingIndicator.scss';\r\n\r\nconst LoadingIndicator: React.FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"LoadingIndicator\"\r\n            width=\"50\"\r\n            height=\"50\"\r\n            fill=\"none\"\r\n            viewBox={`0 0 50 50`}>\r\n            <circle\r\n                cx=\"25\"\r\n                cy=\"25\"\r\n                r=\"21\"\r\n                stroke=\"hsl(30, 100%, 47%)\"\r\n                strokeWidth=\"8\"\r\n                strokeDasharray=\"20 24\" />\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default LoadingIndicator;","import React, { createRef, useState } from 'react';\r\nimport './Home.scss';\r\n\r\nimport Form from 'components/Form';\r\nimport Page from 'pages/Page';\r\nimport DateInput from 'components/Form/DateInput';\r\nimport { CoinGeckoApiCalls } from 'constants/classes/CoinGeckoApiCalls';\r\nimport { routes } from 'constants/routes';\r\nimport { dateToTimeStamp, timeStampToDate, timeStampToDateInputFormat } from 'constants/functions/conversions';\r\nimport Modal from 'components/Modal';\r\nimport DataChart from 'components/DataChart';\r\nimport { TCoinGeckoResponse } from 'constants/classes/CoinGeckoApiCalls/types';\r\nimport LoadingIndicator from 'components/LoadingIndicator';\r\n\r\n\r\ntype THighestVolume = {\r\n    date: string,\r\n    volume: number\r\n}\r\n\r\ntype TDownWardDays = {\r\n    start: string,\r\n    end: string,\r\n    length: number\r\n}\r\n\r\ntype TBestProfitDates = {\r\n    buy: { date: string, price: number },\r\n    sell: { date: string, price: number }\r\n}\r\n\r\nconst Home: React.FC = () => {\r\n    const [loading, isLoading] = useState(false);\r\n    const [modalHidden, hideModal] = useState(true);\r\n    const [dataChart, setDataChart] = useState<JSX.Element | null>(null);\r\n    const [highestVolume, setHighestVolume] = useState<THighestVolume | null>(null);\r\n    const [downWardDays, setDownWardDays] = useState<TDownWardDays | null>(null);\r\n    const [bestProfitDates, setBestProfitDates] = useState<TBestProfitDates | null>(null);\r\n    const [startDateMax, setStartDateMax] = useState<string>(timeStampToDateInputFormat(new Date(Date.now())));\r\n    const [endDateMin, setEndDateMin] = useState<string | undefined>(undefined);\r\n    \r\n    const bitCoinRangeFormRef = createRef<HTMLFormElement>();\r\n    const apiCalls = new CoinGeckoApiCalls(routes.coinGecko);\r\n\r\n    const formatResponseArray = (arr: Array<number[]>): { [key: string]: number } => {\r\n        const formatted: { [key: string]: number } = {};\r\n        let date: string;\r\n        for (let obj of arr) {           \r\n            date = timeStampToDate(new Date(obj[0]));\r\n            // this will set the last value (closest to midnight)\r\n            formatted[date] = obj[1];\r\n\r\n            // this would return highest value for the date\r\n            // if (!formatted[date] || formatted[date] < obj[1]) {\r\n            //     formatted[date] = obj[1];\r\n            // }\r\n        }\r\n        \r\n        return formatted;\r\n    }\r\n\r\n    const getHighestVolume = (total_volumes: Array<number[]>): THighestVolume | null => {\r\n        const volumes = formatResponseArray(total_volumes);\r\n        let highestVolume = 0;\r\n        let highestDate = \"\";\r\n        \r\n        for (let date in volumes) {\r\n            if (highestVolume < volumes[date]) {\r\n                highestVolume = volumes[date];\r\n                highestDate = date;\r\n            }\r\n        }\r\n        if (highestDate === \"\") return null;\r\n        return { date: highestDate, volume: highestVolume }\r\n    }\r\n\r\n    const getDownWardTrendDays = (total_prices: Array<number[]>): TDownWardDays | null => {\r\n        const prices = formatResponseArray(total_prices);\r\n        \r\n        let highestDownWardDays = 0;\r\n        let currentDownWardDays = 0;\r\n        let downWardEnd = \"\";\r\n        let previousDate = \"\";\r\n        for (let date in prices) {\r\n            if (prices[previousDate] && prices[previousDate] > prices[date]) {\r\n                currentDownWardDays++;\r\n            }\r\n            if (highestDownWardDays < currentDownWardDays) {\r\n                highestDownWardDays = currentDownWardDays;\r\n                downWardEnd = date;\r\n            }\r\n            if (prices[previousDate] < prices[date]) {\r\n                currentDownWardDays = 0;\r\n            }\r\n            previousDate = date;\r\n        }\r\n        let dates = Object.keys(prices);\r\n        let downWardStart = dates[dates.findIndex(date => date === downWardEnd) - highestDownWardDays + 1];\r\n        if (highestDownWardDays === 0) return null;\r\n\r\n        return {\r\n            start: downWardStart,\r\n            end: downWardEnd,\r\n            length: highestDownWardDays\r\n        };\r\n\r\n    }\r\n\r\n    const getBestProfitDates = (total_prices: Array<number[]>): TBestProfitDates | null => {\r\n        let downWardTrendDays = getDownWardTrendDays(total_prices);\r\n        const prices = formatResponseArray(total_prices);\r\n\r\n        if (!downWardTrendDays || downWardTrendDays.length === Object.keys(prices).length) return null;\r\n\r\n        let bestBuyDate = \"\";\r\n        let bestSellDate = \"\";\r\n\r\n        for (let date in prices) {\r\n            if (!prices[bestBuyDate] || prices[bestBuyDate] > prices[date]) {\r\n                bestBuyDate = date;\r\n            }\r\n            if (!prices[bestSellDate] || prices[bestSellDate] < prices[date]) {\r\n                bestSellDate = date;\r\n            }\r\n        }\r\n\r\n        return {\r\n            buy: {\r\n                date: bestBuyDate,\r\n                price: prices[bestBuyDate]\r\n            },\r\n            sell: {\r\n                date: bestSellDate,\r\n                price: prices[bestSellDate]\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleResponse = (response: TCoinGeckoResponse) => {\r\n        if(response.prices.length === 0) {\r\n            window.alert(\"No results for given date range!\");\r\n            isLoading(false);\r\n            return;\r\n        }\r\n        \r\n        setHighestVolume(getHighestVolume(response.total_volumes));\r\n        setDownWardDays(getDownWardTrendDays(response.prices));\r\n        setBestProfitDates(getBestProfitDates(response.prices));\r\n        setDataChart(<DataChart finishedDrawing={() => {\r\n            isLoading(false);\r\n        }} data={response} />);\r\n        hideModal(false);\r\n    }\r\n\r\n    const submitBitCoinRangeForm = (e: React.FormEvent<HTMLFormElement>) => {      \r\n        isLoading(true);\r\n        const { start_date, end_date } = Object.fromEntries(new FormData(e.target as HTMLFormElement)) as { start_date: string, end_date: string };\r\n        const queryParameters = {\r\n            vs_currency: \"eur\",\r\n            from: dateToTimeStamp(start_date),\r\n            to: dateToTimeStamp(end_date) + 86399 // midnight - 1s of the given date\r\n        }\r\n        apiCalls.getMarketChartRange('bitcoin', handleResponse, queryParameters);\r\n    }\r\n\r\n    const changeEndDateMin = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEndDateMin(e.target.value);   \r\n        setStartDateMax(e.target.value);    \r\n    }\r\n\r\n    return (\r\n        <Page className={loading ? \"Home loading-modal\" : \"Home\"}>\r\n            {!modalHidden ? <Modal close={hideModal}>\r\n                <h2>BitCoin market values</h2>\r\n                <span>{downWardDays ? `Longest downward trend was ${downWardDays?.length}, from ${downWardDays?.start} to ${downWardDays?.end}` : \"No downward trend\"}</span>\r\n                <span>{highestVolume?.date} had the highest trading volume, total of {highestVolume?.volume.toFixed(2)}€</span>\r\n                <span>{bestProfitDates ? `Best day to buy BitCoins was ${bestProfitDates?.buy.date} for ${bestProfitDates?.buy.price.toFixed(2)}€, and the best day to sell was ${bestProfitDates?.sell.date} for ${bestProfitDates?.sell.price.toFixed(2)}€`: \"No profit for given date range\"}</span>\r\n                {dataChart}\r\n            </Modal> : null}\r\n            {loading ? <LoadingIndicator /> : null}\r\n            <Form\r\n                className=\"BitCoinRangeForm\"\r\n                onSubmit={submitBitCoinRangeForm}\r\n                ref={bitCoinRangeFormRef}>\r\n\r\n                <DateInput\r\n                    formRef={bitCoinRangeFormRef}\r\n                    required={true}\r\n                    id=\"start_date\"\r\n                    name=\"start_date\"\r\n                    title=\"Start date\"\r\n                    max={startDateMax}\r\n                    onChange={changeEndDateMin} />\r\n\r\n                <DateInput\r\n                    formRef={bitCoinRangeFormRef}\r\n                    required={true}\r\n                    id=\"end_date\"\r\n                    name=\"end_date\"\r\n                    title=\"End date\"\r\n                    min={endDateMin}\r\n                    onChange={changeEndDateMin} />\r\n            </Form>\r\n        </Page>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport './App.scss';\n\nimport Home from 'pages/Home';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Home />\n      <h1>Made by: Aleksi Alhola</h1>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}